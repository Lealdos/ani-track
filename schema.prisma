generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String               @id @default(uuid())
    email     String               @unique
    password  String
    fullName  String
    nickname  String?
    favorites Json? // stored as jsonb in PostgreSQL
    lists     UserFavoritesLists[]
    comments  Comment[]
    createdAt DateTime             @default(now())
    updatedAt DateTime             @updatedAt

    // Relations for NextAuth
    accounts Account[]
    sessions Session[]
}

model UserFavoritesLists {
    id          String   @id @default(uuid())
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    title       String
    description String?
    items       Json? // e.g. [{ id: "postId", type: "anime", addedAt: "..." }]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("UserFavoritesLists")
}

model Comment {
    id        String    @id @default(uuid())
    author    User      @relation(fields: [authorId], references: [id])
    authorId  String
    pageId    String
    content   String
    parentId  String?
    parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
    replies   Comment[] @relation("CommentReplies")
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

//
// Models required by NextAuth.js
//
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
